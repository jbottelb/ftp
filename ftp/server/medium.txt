/*
** client.c -- a stream socket client demo
  we ripped this all from beej but thats what you did too sooo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>

#include <arpa/inet.h>

#define SIZE 100 // max number of bytes we can get at once

// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }
    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

int main(int argc, char *argv[])
{
    int sockfd, numbytes;
    char buf[SIZE];
    struct addrinfo hints, *servinfo, *p;
    int rv;
    char s[INET6_ADDRSTRLEN];

    if (argc != 4){
        fprintf(stderr, "youre using it wrong \n");
        exit(1);
    }

    char *ip = argv[1];
    char *port = argv[2];
    char *file_name = argv[3];
    printf("%s %s %s\n", ip, port, file_name);

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;

    if ((rv = getaddrinfo(argv[1], port, &hints, &servinfo)) != 0){
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and connect to the first we can
    for (p = servinfo; p != NULL; p = p->ai_next){
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("client: socket");
            continue;
        }

        if (connect(sockfd, p->ai_addr, p->ai_addrlen) == -1){
            close(sockfd);
            perror("client: connect");
            continue;
        }
        break;
    }

    if (p == NULL){
        fprintf(stderr, "client: failed to connect\n");
        return 2;
    }

    inet_ntop(p->ai_family, get_in_addr((struct sockaddr *)p->ai_addr),
            s, sizeof s);
    printf("client: connecting to %s\n", s);

    freeaddrinfo(servinfo); // all done with this structure

    if (send(sockfd, file_name, SIZE, 0) == -1)
        perror("send");

    int n;
    char buffer[SIZE];
    FILE *fp = fopen(file_name, "w");

    while (1) {
      n = recv(sockfd, buffer, SIZE, 0);
      if (n <= 0){
        break;
      }
      fprintf(fp, "%s", buffer);
      bzero(buffer, SIZE);
    }
    close(sockfd);

    return 0;
}

1
2
3
4
54
6
7
7
8

54
345
346

3546
3
4
63
45
34
5
34
3
7
37
37
3
7
37
34
54
5

45
4
54
5
Have some words
wqd
feerghesgwherghu
eaifhsiohfgdsihgisdohgiosghidsoohigshdighidshg

sd
sd
sd
f
ef 9ewjf9 ejfs
fe9ajgijgishgia
efihihg rgh
php gang



ewifghreihrighirhgirhg
seirhfihihgrihgirhg righ; ordghx;irhgr dighrihgirhgirhgirhg
roegjrihgerihgoerigh ro;ehgxrih gi;h




righjerihgireohg
grjgirhg
1
2
3
4
54
6
7
7
8

54
345
346

3546
3
4
63
45
34
5
34
3
7
37
37
3
7
37
34
54
5

45
4
54
5
Have some words
wqd
feerghesgwherghu
eaifhsiohfgdsihgisdohgiosghidsoohigshdighidshg

sd
sd
sd
f
ef 9ewjf9 ejfs
fe9ajgijgishgia
efihihg rgh
php gang



ewifghreihrighirhgirhg
seirhfihihgrihgirhg righ; ordghx;irhgr dighrihgirhgirhgirhg
roegjrihgerihgoerigh ro;ehgxrih gi;h




righjerihgireohg
grjgirhg
1
2
3
4
54
6
7
7
8

54
345
346

3546
3
4
63
45
34
5
34
3
7
37
37
3
7
37
34
54
5

45
4
54
5
